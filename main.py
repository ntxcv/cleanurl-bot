import os
import logging
import asyncio
from urllib.parse import urlparse, parse_qs, unquote, urlunparse

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.error import Conflict
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def clean_url(input_url: str) -> str | None:
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ u= –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ l.instagram.com
        if "l.instagram.com" in input_url and "?u=" in input_url:
            parsed = urlparse(input_url)
            query = parse_qs(parsed.query)
            encoded_url = query.get('u', [None])[0]
            if not encoded_url:
                return None
            input_url = unquote(encoded_url)
        
        # –û—á–∏—â–∞–µ–º URL –æ—Ç —Ç—Ä–µ–∫–µ—Ä–æ–≤
        parsed = urlparse(input_url)
        query_params = parse_qs(parsed.query)
        
        trackers = ['fbclid', 'utm_source', 'utm_medium', 'utm_campaign', 
                   'utm_term', 'utm_content', 'gclid', 'yclid', '_openstat']
        
        for tracker in trackers:
            query_params.pop(tracker, None)
        
        cleaned_query = '&'.join(
            f"{k}={v[0]}" for k, v in query_params.items()
        ) if query_params else ''
        
        return urlunparse((
            parsed.scheme,
            parsed.netloc,
            parsed.path,
            parsed.params,
            cleaned_query,
            parsed.fragment
        ))
    except Exception as e:
        logger.error(f"URL processing error: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
    reply_keyboard = [["–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"]]
    markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏–∑ —Å–µ—Ç–∏ –Ω–∞ –±—É–∫–≤—É I —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `?u=...`, –∏ —è –≤–µ—Ä–Ω—É —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\nhttps://l.isocialnetwork.com/?u=...",
        reply_markup=markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            return

        text = update.message.text
        logger.info(f"Received: {text}")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É
        if text == "–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É":
            await update.message.reply_text(
                "üìé –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:",
                reply_markup=ReplyKeyboardRemove()
            )
            return

        if any(x in text for x in ["l.instagram.com", "?u=", "?fbclid="]):
            cleaned_url = clean_url(text)
            if cleaned_url:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
                reply_keyboard = [["–í—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É"]]
                markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
                
                await update.message.reply_text(
                    f"üîó –û—á–∏—â–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n\n{cleaned_url}",
                    disable_web_page_preview=False,
                    reply_markup=markup
                )
                await asyncio.sleep(0.3)
                try:
                    await update.message.delete()
                except Exception as e:
                    logger.warning(f"Delete failed: {e}")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É")
        else:
            await update.message.reply_text("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
    except Exception as e:
        logger.error(f"Message handling error: {e}")

def main():
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è Render
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        logger.info("Starting bot...")
        application.run_polling(
            drop_pending_updates=True,
            close_loop=False  # –í–∞–∂–Ω–æ –¥–ª—è Render
        )
    except Conflict:
        logger.error("Bot is already running elsewhere")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
    finally:
        logger.info("Bot stopped")

if __name__ == '__main__':
    main()
