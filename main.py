import os
import logging
import asyncio
from urllib.parse import urlparse, parse_qs, unquote, urlunparse

from dotenv import load_dotenv
from telegram import Update
from telegram.error import Conflict
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# üì§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ?u= –∏ –æ—á–∏—Å—Ç–∫–∞ –æ—Ç —Ç—Ä–µ–∫–µ—Ä–æ–≤
def clean_url(input_url: str) -> str | None:
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ u= –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ l.instagram.com
        if "l.instagram.com" in input_url and "?u=" in input_url:
            parsed = urlparse(input_url)
            query = parse_qs(parsed.query)
            encoded_url = query.get('u', [None])[0]
            if not encoded_url:
                return None
            input_url = unquote(encoded_url)
        
        # –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤-—Ç—Ä–µ–∫–µ—Ä–æ–≤
        parsed = urlparse(input_url)
        query_params = parse_qs(parsed.query)
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        trackers = ['fbclid', 'utm_source', 'utm_medium', 'utm_campaign', 
                    'utm_term', 'utm_content', 'gclid', 'yclid', '_openstat']
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã-—Ç—Ä–µ–∫–µ—Ä—ã
        for tracker in trackers:
            query_params.pop(tracker, None)
        
        # –°–æ–±–∏—Ä–∞–µ–º URL –æ–±—Ä–∞—Ç–Ω–æ
        cleaned_query = '&'.join(
            f"{k}={v[0]}" for k, v in query_params.items()
        ) if query_params else ''
        
        return urlunparse((
            parsed.scheme,
            parsed.netloc,
            parsed.path,
            parsed.params,
            cleaned_query,
            parsed.fragment
        ))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {e}")
        return None

# üöÄ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –∏–∑ Instagram —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `?u=...` –∏–ª–∏ –ª—é–±—É—é —Å—Å—ã–ª–∫—É —Å —Ç—Ä–µ–∫–µ—Ä–∞–º–∏, "
        "–∏ —è –≤–µ—Ä–Ω—É —á–∏—Å—Ç—É—é —Å—Å—ã–ª–∫—É.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\nhttps://l.instagram.com/?u=https%3A%2F%2Fexample.com..."
    )

# üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_message = update.message
        if not user_message or not user_message.text:
            return

        text = user_message.text
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        if any(x in text for x in ["l.instagram.com", "?u=", "?fbclid="]):
            cleaned_url = clean_url(text)
            if cleaned_url:
                response = f"–í–æ—Ç —á–∏—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ üîó:\n{cleaned_url}"
                sent_message = await user_message.reply_text(response, disable_web_page_preview=False)
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ 0.3 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(0.3)
                try:
                    await user_message.delete()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            else:
                await user_message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.")
        else:
            await user_message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await application.run_polling(drop_pending_updates=True)
    except Conflict:
        logger.error("–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ –¥—Ä—É–≥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ. –û—Å—Ç–∞–Ω–æ–≤–∫–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
